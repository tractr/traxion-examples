# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Date custom scalar type"""
scalar Date

type FindManyProfileOutput {
  """The number of results returned by the query."""
  count: Int!

  """The cursor to use in the next query."""
  cursor: String

  """Whether or not there are more results."""
  hasNextPage: Boolean!
  profiles: [Profile!]!
}

type FindManyTaskOutput {
  """The number of results returned by the query."""
  count: Int!

  """The cursor to use in the next query."""
  cursor: String

  """Whether or not there are more results."""
  hasNextPage: Boolean!
  tasks: [Task!]!
}

type FindManyUserOutput {
  """The number of results returned by the query."""
  count: Int!

  """The cursor to use in the next query."""
  cursor: String

  """Whether or not there are more results."""
  hasNextPage: Boolean!
  users: [User!]!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  createProfile(data: ProfileCreateInput!): Profile
  createTask(data: TaskCreateInput!): Task
  createUser(data: UserCreateInput!): User
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteUser(where: UserWhereUniqueInput!): User
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Profile {
  bio: String
  firstName: String!
  id: ID!
  lastName: String!
  user: User!
  userId: Int!
}

type ProfileAvgAggregate {
  id: Float
  userId: Float
}

type ProfileCountAggregate {
  _all: Int!
  bio: Int!
  firstName: Int!
  id: Int!
  lastName: Int!
  userId: Int!
}

input ProfileCreateInput {
  bio: String
  firstName: String!
  lastName: String!
  user: UserCreateNestedOneWithoutProfileInput!
}

input ProfileCreateNestedOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
}

type ProfileMaxAggregate {
  bio: String
  firstName: String
  id: Int
  lastName: String
  userId: Int
}

type ProfileMinAggregate {
  bio: String
  firstName: String
  id: Int
  lastName: String
  userId: Int
}

input ProfileOrderByWithRelationInput {
  bio: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

enum ProfileScalarFieldEnum {
  bio
  firstName
  id
  lastName
  userId
}

type ProfileSumAggregate {
  id: Int
  userId: Int
}

input ProfileUpdateInput {
  bio: String
  firstName: String
  lastName: String
  user: UserUpdateOneRequiredWithoutProfileNestedInput
}

input ProfileUpdateOneWithoutUserNestedInput {
  connect: ProfileWhereUniqueInput
  disconnect: Boolean
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  bio: StringNullableFilter
  firstName: StringFilter
  id: IntFilter
  lastName: StringFilter
  user: UserRelationFilter
  userId: IntFilter
}

input ProfileWhereUniqueInput {
  id: Int
  userId: Int
}

type Query {
  findManyProfiles(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): FindManyProfileOutput!
  findManyTasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): FindManyTaskOutput!
  findManyUsers(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): FindManyUserOutput!
  findUniqueProfile(where: ProfileWhereUniqueInput!): Profile
  findUniqueTask(where: TaskWhereUniqueInput!): Task
  findUniqueUser(where: UserWhereUniqueInput!): User
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Task {
  _count: TaskCount!
  author: User!
  authorId: Int!
  description: String
  id: ID!
  sharedWith(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]
  status: String!
  title: String!
}

type TaskAvgAggregate {
  authorId: Float
  id: Float
}

type TaskCount {
  sharedWith: Int!
}

type TaskCountAggregate {
  _all: Int!
  authorId: Int!
  description: Int!
  id: Int!
  status: Int!
  title: Int!
}

input TaskCreateInput {
  author: UserCreateNestedOneWithoutTasksInput!
  description: String
  sharedWith: UserCreateNestedManyWithoutSharedTasksInput
  status: String
  title: String!
}

input TaskCreateNestedManyWithoutAuthorInput {
  connect: [TaskWhereUniqueInput!]
}

input TaskCreateNestedManyWithoutSharedWithInput {
  connect: [TaskWhereUniqueInput!]
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

type TaskMaxAggregate {
  authorId: Int
  description: String
  id: Int
  status: String
  title: String
}

type TaskMinAggregate {
  authorId: Int
  description: String
  id: Int
  status: String
  title: String
}

input TaskOrderByRelationAggregateInput {
  _count: SortOrder
}

input TaskOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  description: SortOrder
  id: SortOrder
  sharedWith: UserOrderByRelationAggregateInput
  status: SortOrder
  title: SortOrder
}

enum TaskScalarFieldEnum {
  authorId
  description
  id
  status
  title
}

type TaskSumAggregate {
  authorId: Int
  id: Int
}

input TaskUpdateInput {
  author: UserUpdateOneRequiredWithoutTasksNestedInput
  description: String
  sharedWith: UserUpdateManyWithoutSharedTasksNestedInput
  status: String
  title: String
}

input TaskUpdateManyWithoutAuthorNestedInput {
  connect: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
}

input TaskUpdateManyWithoutSharedWithNestedInput {
  connect: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  author: UserRelationFilter
  authorId: IntFilter
  description: StringNullableFilter
  id: IntFilter
  sharedWith: UserListRelationFilter
  status: StringFilter
  title: StringFilter
}

input TaskWhereUniqueInput {
  id: Int
}

type User {
  _count: UserCount!
  email: String!
  id: ID!
  password: String!
  profile: Profile
  roles: String!
  sharedTasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]
}

type UserAvgAggregate {
  id: Float
}

type UserCount {
  sharedTasks: Int!
  tasks: Int!
}

type UserCountAggregate {
  _all: Int!
  email: Int!
  id: Int!
  password: Int!
  roles: Int!
}

input UserCreateInput {
  email: String!
  password: String!
  profile: ProfileCreateNestedOneWithoutUserInput
  roles: String
  sharedTasks: TaskCreateNestedManyWithoutSharedWithInput
  tasks: TaskCreateNestedManyWithoutAuthorInput
}

input UserCreateNestedManyWithoutSharedTasksInput {
  connect: [UserWhereUniqueInput!]
}

input UserCreateNestedOneWithoutProfileInput {
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutTasksInput {
  connect: UserWhereUniqueInput
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserMaxAggregate {
  email: String
  id: Int
  password: String
  roles: String
}

type UserMinAggregate {
  email: String
  id: Int
  password: String
  roles: String
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  email: SortOrder
  id: SortOrder
  password: SortOrder
  profile: ProfileOrderByWithRelationInput
  roles: SortOrder
  sharedTasks: TaskOrderByRelationAggregateInput
  tasks: TaskOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  email
  id
  password
  roles
}

type UserSumAggregate {
  id: Int
}

input UserUpdateInput {
  email: String
  password: String
  profile: ProfileUpdateOneWithoutUserNestedInput
  roles: String
  sharedTasks: TaskUpdateManyWithoutSharedWithNestedInput
  tasks: TaskUpdateManyWithoutAuthorNestedInput
}

input UserUpdateManyWithoutSharedTasksNestedInput {
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
}

input UserUpdateOneRequiredWithoutProfileNestedInput {
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTasksNestedInput {
  connect: UserWhereUniqueInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  email: StringFilter
  id: IntFilter
  password: StringFilter
  profile: ProfileRelationFilter
  roles: StringFilter
  sharedTasks: TaskListRelationFilter
  tasks: TaskListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}